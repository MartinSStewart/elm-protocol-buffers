{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Google.Protobuf exposing
    ( Syntax(..), FieldKind(..), FieldCardinality(..), NullValue(..), Any, SourceContext, Type, Field, Enum, EnumValue, Option, Api, Method, Mixin, Duration, Empty, FieldMask, Struct, ValueKind(..), Kind(..), Value, ListValue, Timestamp, DoubleValue, FloatValue, Int64Value, UInt64Value, Int32Value, UInt32Value, BoolValue, StringValue, BytesValue
    , anyDecoder, sourceContextDecoder, typeDecoder, fieldDecoder, enumDecoder, enumValueDecoder, optionDecoder, apiDecoder, methodDecoder, mixinDecoder, durationDecoder, emptyDecoder, fieldMaskDecoder, structDecoder, valueDecoder, listValueDecoder, timestampDecoder, doubleValueDecoder, floatValueDecoder, int64ValueDecoder, uInt64ValueDecoder, int32ValueDecoder, uInt32ValueDecoder, boolValueDecoder, stringValueDecoder, bytesValueDecoder
    , toAnyEncoder, toSourceContextEncoder, toTypeEncoder, toFieldEncoder, toEnumEncoder, toEnumValueEncoder, toOptionEncoder, toApiEncoder, toMethodEncoder, toMixinEncoder, toDurationEncoder, toEmptyEncoder, toFieldMaskEncoder, toStructEncoder, toValueEncoder, toListValueEncoder, toTimestampEncoder, toDoubleValueEncoder, toFloatValueEncoder, toInt64ValueEncoder, toUInt64ValueEncoder, toInt32ValueEncoder, toUInt32ValueEncoder, toBoolValueEncoder, toStringValueEncoder, toBytesValueEncoder
    )

{-| ProtoBuf module: `Google.Protobuf`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-1
  - `protoc` 3.6.1
  - the following specification files:
      - `google/protobuf/any.proto`
      - `google/protobuf/api.proto`
      - `google/protobuf/duration.proto`
      - `google/protobuf/empty.proto`
      - `google/protobuf/field_mask.proto`
      - `google/protobuf/source_context.proto`
      - `google/protobuf/struct.proto`
      - `google/protobuf/timestamp.proto`
      - `google/protobuf/type.proto`
      - `google/protobuf/wrappers.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.0.0) version 1.0.0 or higher.


# Model

@docs Syntax, FieldKind, FieldCardinality, NullValue, Any, SourceContext, Type, Field, Enum, EnumValue, Option, Api, Method, Mixin, Duration, Empty, FieldMask, Struct, ValueKind, Kind, Value, ListValue, Timestamp, DoubleValue, FloatValue, Int64Value, UInt64Value, Int32Value, UInt32Value, BoolValue, StringValue, BytesValue


# Decoder

@docs anyDecoder, sourceContextDecoder, typeDecoder, fieldDecoder, enumDecoder, enumValueDecoder, optionDecoder, apiDecoder, methodDecoder, mixinDecoder, durationDecoder, emptyDecoder, fieldMaskDecoder, structDecoder, valueDecoder, listValueDecoder, timestampDecoder, doubleValueDecoder, floatValueDecoder, int64ValueDecoder, uInt64ValueDecoder, int32ValueDecoder, uInt32ValueDecoder, boolValueDecoder, stringValueDecoder, bytesValueDecoder


# Encoder

@docs toAnyEncoder, toSourceContextEncoder, toTypeEncoder, toFieldEncoder, toEnumEncoder, toEnumValueEncoder, toOptionEncoder, toApiEncoder, toMethodEncoder, toMixinEncoder, toDurationEncoder, toEmptyEncoder, toFieldMaskEncoder, toStructEncoder, toValueEncoder, toListValueEncoder, toTimestampEncoder, toDoubleValueEncoder, toFloatValueEncoder, toInt64ValueEncoder, toUInt64ValueEncoder, toInt32ValueEncoder, toUInt32ValueEncoder, toBoolValueEncoder, toStringValueEncoder, toBytesValueEncoder

-}

import Bytes
import Dict
import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Syntax` enumeration
-}
type Syntax
    = SyntaxProto2
    | SyntaxProto3
    | SyntaxUnrecognized_ Int


{-| `FieldKind` enumeration
-}
type FieldKind
    = TypeUnknown
    | TypeDouble
    | TypeFloat
    | TypeInt64
    | TypeUint64
    | TypeInt32
    | TypeFixed64
    | TypeFixed32
    | TypeBool
    | TypeString
    | TypeGroup
    | TypeMessage
    | TypeBytes
    | TypeUint32
    | TypeEnum
    | TypeSfixed32
    | TypeSfixed64
    | TypeSint32
    | TypeSint64
    | FieldKindUnrecognized_ Int


{-| `FieldCardinality` enumeration
-}
type FieldCardinality
    = CardinalityUnknown
    | CardinalityOptional
    | CardinalityRequired
    | CardinalityRepeated
    | FieldCardinalityUnrecognized_ Int


{-| `NullValue` enumeration
-}
type NullValue
    = NullValue
    | NullValueUnrecognized_ Int


{-| `Any` message
-}
type alias Any =
    { typeUrl : String
    , value : Bytes.Bytes
    }


{-| `SourceContext` message
-}
type alias SourceContext =
    { fileName : String
    }


{-| `Type` message
-}
type alias Type =
    { name : String
    , fields : List Field
    , oneofs : List String
    , options : List Option
    , sourceContext : Maybe SourceContext
    , syntax : Syntax
    }


{-| `Field` message
-}
type alias Field =
    { kind : FieldKind
    , cardinality : FieldCardinality
    , number : Int
    , name : String
    , typeUrl : String
    , oneofIndex : Int
    , packed : Bool
    , options : List Option
    , jsonName : String
    , defaultValue : String
    }


{-| `Enum` message
-}
type alias Enum =
    { name : String
    , enumvalue : List EnumValue
    , options : List Option
    , sourceContext : Maybe SourceContext
    , syntax : Syntax
    }


{-| `EnumValue` message
-}
type alias EnumValue =
    { name : String
    , number : Int
    , options : List Option
    }


{-| `Option` message
-}
type alias Option =
    { name : String
    , value : Maybe Any
    }


{-| `Api` message
-}
type alias Api =
    { name : String
    , methods : List Method
    , options : List Option
    , version : String
    , sourceContext : Maybe SourceContext
    , mixins : List Mixin
    , syntax : Syntax
    }


{-| `Method` message
-}
type alias Method =
    { name : String
    , requestTypeUrl : String
    , requestStreaming : Bool
    , responseTypeUrl : String
    , responseStreaming : Bool
    , options : List Option
    , syntax : Syntax
    }


{-| `Mixin` message
-}
type alias Mixin =
    { name : String
    , root : String
    }


{-| `Duration` message
-}
type alias Duration =
    { seconds : Int
    , nanos : Int
    }


{-| `Empty` message
-}
type alias Empty =
    {}


{-| `FieldMask` message
-}
type alias FieldMask =
    { paths : List String
    }


{-| `Struct` message
-}
type alias Struct =
    { fields : Dict.Dict String (Maybe Value)
    }


{-| ValueKind
-}
type ValueKind
    = ValueKind (Maybe Kind)


{-| Kind
-}
type Kind
    = KindNullValue NullValue
    | KindNumberValue Float
    | KindStringValue String
    | KindBoolValue Bool
    | KindStructValue Struct
    | KindListValue ListValue


{-| `Value` message
-}
type alias Value =
    { kind : ValueKind
    }


{-| `ListValue` message
-}
type alias ListValue =
    { values : List Value
    }


{-| `Timestamp` message
-}
type alias Timestamp =
    { seconds : Int
    , nanos : Int
    }


{-| `DoubleValue` message
-}
type alias DoubleValue =
    { value : Float
    }


{-| `FloatValue` message
-}
type alias FloatValue =
    { value : Float
    }


{-| `Int64Value` message
-}
type alias Int64Value =
    { value : Int
    }


{-| `UInt64Value` message
-}
type alias UInt64Value =
    { value : Int
    }


{-| `Int32Value` message
-}
type alias Int32Value =
    { value : Int
    }


{-| `UInt32Value` message
-}
type alias UInt32Value =
    { value : Int
    }


{-| `BoolValue` message
-}
type alias BoolValue =
    { value : Bool
    }


{-| `StringValue` message
-}
type alias StringValue =
    { value : String
    }


{-| `BytesValue` message
-}
type alias BytesValue =
    { value : Bytes.Bytes
    }



-- DECODER


syntaxDecoder : Decode.Decoder Syntax
syntaxDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        SyntaxProto2

                    1 ->
                        SyntaxProto3

                    v ->
                        SyntaxUnrecognized_ v
            )


fieldKindDecoder : Decode.Decoder FieldKind
fieldKindDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        TypeUnknown

                    1 ->
                        TypeDouble

                    2 ->
                        TypeFloat

                    3 ->
                        TypeInt64

                    4 ->
                        TypeUint64

                    5 ->
                        TypeInt32

                    6 ->
                        TypeFixed64

                    7 ->
                        TypeFixed32

                    8 ->
                        TypeBool

                    9 ->
                        TypeString

                    10 ->
                        TypeGroup

                    11 ->
                        TypeMessage

                    12 ->
                        TypeBytes

                    13 ->
                        TypeUint32

                    14 ->
                        TypeEnum

                    15 ->
                        TypeSfixed32

                    16 ->
                        TypeSfixed64

                    17 ->
                        TypeSint32

                    18 ->
                        TypeSint64

                    v ->
                        FieldKindUnrecognized_ v
            )


fieldCardinalityDecoder : Decode.Decoder FieldCardinality
fieldCardinalityDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        CardinalityUnknown

                    1 ->
                        CardinalityOptional

                    2 ->
                        CardinalityRequired

                    3 ->
                        CardinalityRepeated

                    v ->
                        FieldCardinalityUnrecognized_ v
            )


nullValueDecoder : Decode.Decoder NullValue
nullValueDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        NullValue

                    v ->
                        NullValueUnrecognized_ v
            )


{-| `Any` decoder
-}
anyDecoder : Decode.Decoder Any
anyDecoder =
    Decode.message (Any "" (Encode.encode <| Encode.string ""))
        [ Decode.optional 1 Decode.string setTypeUrl
        , Decode.optional 2 Decode.bytes setValue
        ]


{-| `SourceContext` decoder
-}
sourceContextDecoder : Decode.Decoder SourceContext
sourceContextDecoder =
    Decode.message (SourceContext "")
        [ Decode.optional 1 Decode.string setFileName
        ]


{-| `Type` decoder
-}
typeDecoder : Decode.Decoder Type
typeDecoder =
    Decode.message (Type "" [] [] [] Nothing SyntaxProto2)
        [ Decode.optional 1 Decode.string setName
        , Decode.repeated 2 fieldDecoder .fields setFields
        , Decode.repeated 3 Decode.string .oneofs setOneofs
        , Decode.repeated 4 optionDecoder .options setOptions
        , Decode.optional 5 (Decode.map Just sourceContextDecoder) setSourceContext
        , Decode.optional 6 syntaxDecoder setSyntax
        ]


{-| `Field` decoder
-}
fieldDecoder : Decode.Decoder Field
fieldDecoder =
    Decode.message (Field TypeUnknown CardinalityUnknown 0 "" "" 0 False [] "" "")
        [ Decode.optional 1 fieldKindDecoder setKind
        , Decode.optional 2 fieldCardinalityDecoder setCardinality
        , Decode.optional 3 Decode.int32 setNumber
        , Decode.optional 4 Decode.string setName
        , Decode.optional 6 Decode.string setTypeUrl
        , Decode.optional 7 Decode.int32 setOneofIndex
        , Decode.optional 8 Decode.bool setPacked
        , Decode.repeated 9 optionDecoder .options setOptions
        , Decode.optional 10 Decode.string setJsonName
        , Decode.optional 11 Decode.string setDefaultValue
        ]


{-| `Enum` decoder
-}
enumDecoder : Decode.Decoder Enum
enumDecoder =
    Decode.message (Enum "" [] [] Nothing SyntaxProto2)
        [ Decode.optional 1 Decode.string setName
        , Decode.repeated 2 enumValueDecoder .enumvalue setEnumvalue
        , Decode.repeated 3 optionDecoder .options setOptions
        , Decode.optional 4 (Decode.map Just sourceContextDecoder) setSourceContext
        , Decode.optional 5 syntaxDecoder setSyntax
        ]


{-| `EnumValue` decoder
-}
enumValueDecoder : Decode.Decoder EnumValue
enumValueDecoder =
    Decode.message (EnumValue "" 0 [])
        [ Decode.optional 1 Decode.string setName
        , Decode.optional 2 Decode.int32 setNumber
        , Decode.repeated 3 optionDecoder .options setOptions
        ]


{-| `Option` decoder
-}
optionDecoder : Decode.Decoder Option
optionDecoder =
    Decode.message (Option "" Nothing)
        [ Decode.optional 1 Decode.string setName
        , Decode.optional 2 (Decode.map Just anyDecoder) setValue
        ]


{-| `Api` decoder
-}
apiDecoder : Decode.Decoder Api
apiDecoder =
    Decode.message (Api "" [] [] "" Nothing [] SyntaxProto2)
        [ Decode.optional 1 Decode.string setName
        , Decode.repeated 2 methodDecoder .methods setMethods
        , Decode.repeated 3 optionDecoder .options setOptions
        , Decode.optional 4 Decode.string setVersion
        , Decode.optional 5 (Decode.map Just sourceContextDecoder) setSourceContext
        , Decode.repeated 6 mixinDecoder .mixins setMixins
        , Decode.optional 7 syntaxDecoder setSyntax
        ]


{-| `Method` decoder
-}
methodDecoder : Decode.Decoder Method
methodDecoder =
    Decode.message (Method "" "" False "" False [] SyntaxProto2)
        [ Decode.optional 1 Decode.string setName
        , Decode.optional 2 Decode.string setRequestTypeUrl
        , Decode.optional 3 Decode.bool setRequestStreaming
        , Decode.optional 4 Decode.string setResponseTypeUrl
        , Decode.optional 5 Decode.bool setResponseStreaming
        , Decode.repeated 6 optionDecoder .options setOptions
        , Decode.optional 7 syntaxDecoder setSyntax
        ]


{-| `Mixin` decoder
-}
mixinDecoder : Decode.Decoder Mixin
mixinDecoder =
    Decode.message (Mixin "" "")
        [ Decode.optional 1 Decode.string setName
        , Decode.optional 2 Decode.string setRoot
        ]


{-| `Duration` decoder
-}
durationDecoder : Decode.Decoder Duration
durationDecoder =
    Decode.message (Duration 0 0)
        [ Decode.optional 1 Decode.int32 setSeconds
        , Decode.optional 2 Decode.int32 setNanos
        ]


{-| `Empty` decoder
-}
emptyDecoder : Decode.Decoder Empty
emptyDecoder =
    Decode.message Empty
        []


{-| `FieldMask` decoder
-}
fieldMaskDecoder : Decode.Decoder FieldMask
fieldMaskDecoder =
    Decode.message (FieldMask [])
        [ Decode.repeated 1 Decode.string .paths setPaths
        ]


{-| `Struct` decoder
-}
structDecoder : Decode.Decoder Struct
structDecoder =
    Decode.message (Struct Dict.empty)
        [ Decode.mapped 1 ( "", Nothing ) Decode.string (Decode.map Just valueDecoder) .fields setFields
        ]


unwrapValueKind : ValueKind -> Maybe Kind
unwrapValueKind (ValueKind value) =
    value


{-| `Value` decoder
-}
valueDecoder : Decode.Decoder Value
valueDecoder =
    Decode.message (Value (ValueKind Nothing))
        [ Decode.oneOf
            [ ( 1, Decode.lazy (\_ -> Decode.map KindNullValue nullValueDecoder) )
            , ( 2, Decode.lazy (\_ -> Decode.map KindNumberValue Decode.double) )
            , ( 3, Decode.lazy (\_ -> Decode.map KindStringValue Decode.string) )
            , ( 4, Decode.lazy (\_ -> Decode.map KindBoolValue Decode.bool) )
            , ( 5, Decode.lazy (\_ -> Decode.map KindStructValue structDecoder) )
            , ( 6, Decode.lazy (\_ -> Decode.map KindListValue listValueDecoder) )
            ]
            (setKind << ValueKind)
        ]


{-| `ListValue` decoder
-}
listValueDecoder : Decode.Decoder ListValue
listValueDecoder =
    Decode.message (ListValue [])
        [ Decode.repeated 1 valueDecoder .values setValues
        ]


{-| `Timestamp` decoder
-}
timestampDecoder : Decode.Decoder Timestamp
timestampDecoder =
    Decode.message (Timestamp 0 0)
        [ Decode.optional 1 Decode.int32 setSeconds
        , Decode.optional 2 Decode.int32 setNanos
        ]


{-| `DoubleValue` decoder
-}
doubleValueDecoder : Decode.Decoder DoubleValue
doubleValueDecoder =
    Decode.message (DoubleValue 0)
        [ Decode.optional 1 Decode.double setValue
        ]


{-| `FloatValue` decoder
-}
floatValueDecoder : Decode.Decoder FloatValue
floatValueDecoder =
    Decode.message (FloatValue 0)
        [ Decode.optional 1 Decode.float setValue
        ]


{-| `Int64Value` decoder
-}
int64ValueDecoder : Decode.Decoder Int64Value
int64ValueDecoder =
    Decode.message (Int64Value 0)
        [ Decode.optional 1 Decode.int32 setValue
        ]


{-| `UInt64Value` decoder
-}
uInt64ValueDecoder : Decode.Decoder UInt64Value
uInt64ValueDecoder =
    Decode.message (UInt64Value 0)
        [ Decode.optional 1 Decode.uint32 setValue
        ]


{-| `Int32Value` decoder
-}
int32ValueDecoder : Decode.Decoder Int32Value
int32ValueDecoder =
    Decode.message (Int32Value 0)
        [ Decode.optional 1 Decode.int32 setValue
        ]


{-| `UInt32Value` decoder
-}
uInt32ValueDecoder : Decode.Decoder UInt32Value
uInt32ValueDecoder =
    Decode.message (UInt32Value 0)
        [ Decode.optional 1 Decode.uint32 setValue
        ]


{-| `BoolValue` decoder
-}
boolValueDecoder : Decode.Decoder BoolValue
boolValueDecoder =
    Decode.message (BoolValue False)
        [ Decode.optional 1 Decode.bool setValue
        ]


{-| `StringValue` decoder
-}
stringValueDecoder : Decode.Decoder StringValue
stringValueDecoder =
    Decode.message (StringValue "")
        [ Decode.optional 1 Decode.string setValue
        ]


{-| `BytesValue` decoder
-}
bytesValueDecoder : Decode.Decoder BytesValue
bytesValueDecoder =
    Decode.message (BytesValue (Encode.encode <| Encode.string ""))
        [ Decode.optional 1 Decode.bytes setValue
        ]



-- ENCODER


toSyntaxEncoder : Syntax -> Encode.Encoder
toSyntaxEncoder value =
    Encode.int32 <|
        case value of
            SyntaxProto2 ->
                0

            SyntaxProto3 ->
                1

            SyntaxUnrecognized_ v ->
                v


toFieldKindEncoder : FieldKind -> Encode.Encoder
toFieldKindEncoder value =
    Encode.int32 <|
        case value of
            TypeUnknown ->
                0

            TypeDouble ->
                1

            TypeFloat ->
                2

            TypeInt64 ->
                3

            TypeUint64 ->
                4

            TypeInt32 ->
                5

            TypeFixed64 ->
                6

            TypeFixed32 ->
                7

            TypeBool ->
                8

            TypeString ->
                9

            TypeGroup ->
                10

            TypeMessage ->
                11

            TypeBytes ->
                12

            TypeUint32 ->
                13

            TypeEnum ->
                14

            TypeSfixed32 ->
                15

            TypeSfixed64 ->
                16

            TypeSint32 ->
                17

            TypeSint64 ->
                18

            FieldKindUnrecognized_ v ->
                v


toFieldCardinalityEncoder : FieldCardinality -> Encode.Encoder
toFieldCardinalityEncoder value =
    Encode.int32 <|
        case value of
            CardinalityUnknown ->
                0

            CardinalityOptional ->
                1

            CardinalityRequired ->
                2

            CardinalityRepeated ->
                3

            FieldCardinalityUnrecognized_ v ->
                v


toNullValueEncoder : NullValue -> Encode.Encoder
toNullValueEncoder value =
    Encode.int32 <|
        case value of
            NullValue ->
                0

            NullValueUnrecognized_ v ->
                v


{-| `Any` encoder
-}
toAnyEncoder : Any -> Encode.Encoder
toAnyEncoder model =
    Encode.message
        [ ( 1, Encode.string model.typeUrl )
        , ( 2, Encode.bytes model.value )
        ]


{-| `SourceContext` encoder
-}
toSourceContextEncoder : SourceContext -> Encode.Encoder
toSourceContextEncoder model =
    Encode.message
        [ ( 1, Encode.string model.fileName )
        ]


{-| `Type` encoder
-}
toTypeEncoder : Type -> Encode.Encoder
toTypeEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.list toFieldEncoder model.fields )
        , ( 3, Encode.list Encode.string model.oneofs )
        , ( 4, Encode.list toOptionEncoder model.options )
        , ( 5, (Maybe.withDefault Encode.none << Maybe.map toSourceContextEncoder) model.sourceContext )
        , ( 6, toSyntaxEncoder model.syntax )
        ]


{-| `Field` encoder
-}
toFieldEncoder : Field -> Encode.Encoder
toFieldEncoder model =
    Encode.message
        [ ( 1, toFieldKindEncoder model.kind )
        , ( 2, toFieldCardinalityEncoder model.cardinality )
        , ( 3, Encode.int32 model.number )
        , ( 4, Encode.string model.name )
        , ( 6, Encode.string model.typeUrl )
        , ( 7, Encode.int32 model.oneofIndex )
        , ( 8, Encode.bool model.packed )
        , ( 9, Encode.list toOptionEncoder model.options )
        , ( 10, Encode.string model.jsonName )
        , ( 11, Encode.string model.defaultValue )
        ]


{-| `Enum` encoder
-}
toEnumEncoder : Enum -> Encode.Encoder
toEnumEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.list toEnumValueEncoder model.enumvalue )
        , ( 3, Encode.list toOptionEncoder model.options )
        , ( 4, (Maybe.withDefault Encode.none << Maybe.map toSourceContextEncoder) model.sourceContext )
        , ( 5, toSyntaxEncoder model.syntax )
        ]


{-| `EnumValue` encoder
-}
toEnumValueEncoder : EnumValue -> Encode.Encoder
toEnumValueEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.int32 model.number )
        , ( 3, Encode.list toOptionEncoder model.options )
        ]


{-| `Option` encoder
-}
toOptionEncoder : Option -> Encode.Encoder
toOptionEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toAnyEncoder) model.value )
        ]


{-| `Api` encoder
-}
toApiEncoder : Api -> Encode.Encoder
toApiEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.list toMethodEncoder model.methods )
        , ( 3, Encode.list toOptionEncoder model.options )
        , ( 4, Encode.string model.version )
        , ( 5, (Maybe.withDefault Encode.none << Maybe.map toSourceContextEncoder) model.sourceContext )
        , ( 6, Encode.list toMixinEncoder model.mixins )
        , ( 7, toSyntaxEncoder model.syntax )
        ]


{-| `Method` encoder
-}
toMethodEncoder : Method -> Encode.Encoder
toMethodEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.string model.requestTypeUrl )
        , ( 3, Encode.bool model.requestStreaming )
        , ( 4, Encode.string model.responseTypeUrl )
        , ( 5, Encode.bool model.responseStreaming )
        , ( 6, Encode.list toOptionEncoder model.options )
        , ( 7, toSyntaxEncoder model.syntax )
        ]


{-| `Mixin` encoder
-}
toMixinEncoder : Mixin -> Encode.Encoder
toMixinEncoder model =
    Encode.message
        [ ( 1, Encode.string model.name )
        , ( 2, Encode.string model.root )
        ]


{-| `Duration` encoder
-}
toDurationEncoder : Duration -> Encode.Encoder
toDurationEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.seconds )
        , ( 2, Encode.int32 model.nanos )
        ]


{-| `Empty` encoder
-}
toEmptyEncoder : Empty -> Encode.Encoder
toEmptyEncoder model =
    Encode.message
        []


{-| `FieldMask` encoder
-}
toFieldMaskEncoder : FieldMask -> Encode.Encoder
toFieldMaskEncoder model =
    Encode.message
        [ ( 1, Encode.list Encode.string model.paths )
        ]


{-| `Struct` encoder
-}
toStructEncoder : Struct -> Encode.Encoder
toStructEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.string (Maybe.withDefault Encode.none << Maybe.map toValueEncoder) model.fields )
        ]


toKindEncoder : Kind -> ( Int, Encode.Encoder )
toKindEncoder model =
    case model of
        KindNullValue value ->
            ( 1, toNullValueEncoder value )

        KindNumberValue value ->
            ( 2, Encode.double value )

        KindStringValue value ->
            ( 3, Encode.string value )

        KindBoolValue value ->
            ( 4, Encode.bool value )

        KindStructValue value ->
            ( 5, toStructEncoder value )

        KindListValue value ->
            ( 6, toListValueEncoder value )


{-| `Value` encoder
-}
toValueEncoder : Value -> Encode.Encoder
toValueEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toKindEncoder (unwrapValueKind model.kind)
        ]


{-| `ListValue` encoder
-}
toListValueEncoder : ListValue -> Encode.Encoder
toListValueEncoder model =
    Encode.message
        [ ( 1, Encode.list toValueEncoder model.values )
        ]


{-| `Timestamp` encoder
-}
toTimestampEncoder : Timestamp -> Encode.Encoder
toTimestampEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.seconds )
        , ( 2, Encode.int32 model.nanos )
        ]


{-| `DoubleValue` encoder
-}
toDoubleValueEncoder : DoubleValue -> Encode.Encoder
toDoubleValueEncoder model =
    Encode.message
        [ ( 1, Encode.double model.value )
        ]


{-| `FloatValue` encoder
-}
toFloatValueEncoder : FloatValue -> Encode.Encoder
toFloatValueEncoder model =
    Encode.message
        [ ( 1, Encode.float model.value )
        ]


{-| `Int64Value` encoder
-}
toInt64ValueEncoder : Int64Value -> Encode.Encoder
toInt64ValueEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.value )
        ]


{-| `UInt64Value` encoder
-}
toUInt64ValueEncoder : UInt64Value -> Encode.Encoder
toUInt64ValueEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.value )
        ]


{-| `Int32Value` encoder
-}
toInt32ValueEncoder : Int32Value -> Encode.Encoder
toInt32ValueEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.value )
        ]


{-| `UInt32Value` encoder
-}
toUInt32ValueEncoder : UInt32Value -> Encode.Encoder
toUInt32ValueEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.value )
        ]


{-| `BoolValue` encoder
-}
toBoolValueEncoder : BoolValue -> Encode.Encoder
toBoolValueEncoder model =
    Encode.message
        [ ( 1, Encode.bool model.value )
        ]


{-| `StringValue` encoder
-}
toStringValueEncoder : StringValue -> Encode.Encoder
toStringValueEncoder model =
    Encode.message
        [ ( 1, Encode.string model.value )
        ]


{-| `BytesValue` encoder
-}
toBytesValueEncoder : BytesValue -> Encode.Encoder
toBytesValueEncoder model =
    Encode.message
        [ ( 1, Encode.bytes model.value )
        ]



-- SETTERS


setTypeUrl : a -> { b | typeUrl : a } -> { b | typeUrl : a }
setTypeUrl value model =
    { model | typeUrl = value }


setValue : a -> { b | value : a } -> { b | value : a }
setValue value model =
    { model | value = value }


setFileName : a -> { b | fileName : a } -> { b | fileName : a }
setFileName value model =
    { model | fileName = value }


setName : a -> { b | name : a } -> { b | name : a }
setName value model =
    { model | name = value }


setFields : a -> { b | fields : a } -> { b | fields : a }
setFields value model =
    { model | fields = value }


setOneofs : a -> { b | oneofs : a } -> { b | oneofs : a }
setOneofs value model =
    { model | oneofs = value }


setOptions : a -> { b | options : a } -> { b | options : a }
setOptions value model =
    { model | options = value }


setSourceContext : a -> { b | sourceContext : a } -> { b | sourceContext : a }
setSourceContext value model =
    { model | sourceContext = value }


setSyntax : a -> { b | syntax : a } -> { b | syntax : a }
setSyntax value model =
    { model | syntax = value }


setKind : a -> { b | kind : a } -> { b | kind : a }
setKind value model =
    { model | kind = value }


setCardinality : a -> { b | cardinality : a } -> { b | cardinality : a }
setCardinality value model =
    { model | cardinality = value }


setNumber : a -> { b | number : a } -> { b | number : a }
setNumber value model =
    { model | number = value }


setOneofIndex : a -> { b | oneofIndex : a } -> { b | oneofIndex : a }
setOneofIndex value model =
    { model | oneofIndex = value }


setPacked : a -> { b | packed : a } -> { b | packed : a }
setPacked value model =
    { model | packed = value }


setJsonName : a -> { b | jsonName : a } -> { b | jsonName : a }
setJsonName value model =
    { model | jsonName = value }


setDefaultValue : a -> { b | defaultValue : a } -> { b | defaultValue : a }
setDefaultValue value model =
    { model | defaultValue = value }


setEnumvalue : a -> { b | enumvalue : a } -> { b | enumvalue : a }
setEnumvalue value model =
    { model | enumvalue = value }


setMethods : a -> { b | methods : a } -> { b | methods : a }
setMethods value model =
    { model | methods = value }


setVersion : a -> { b | version : a } -> { b | version : a }
setVersion value model =
    { model | version = value }


setMixins : a -> { b | mixins : a } -> { b | mixins : a }
setMixins value model =
    { model | mixins = value }


setRequestTypeUrl : a -> { b | requestTypeUrl : a } -> { b | requestTypeUrl : a }
setRequestTypeUrl value model =
    { model | requestTypeUrl = value }


setRequestStreaming : a -> { b | requestStreaming : a } -> { b | requestStreaming : a }
setRequestStreaming value model =
    { model | requestStreaming = value }


setResponseTypeUrl : a -> { b | responseTypeUrl : a } -> { b | responseTypeUrl : a }
setResponseTypeUrl value model =
    { model | responseTypeUrl = value }


setResponseStreaming : a -> { b | responseStreaming : a } -> { b | responseStreaming : a }
setResponseStreaming value model =
    { model | responseStreaming = value }


setRoot : a -> { b | root : a } -> { b | root : a }
setRoot value model =
    { model | root = value }


setSeconds : a -> { b | seconds : a } -> { b | seconds : a }
setSeconds value model =
    { model | seconds = value }


setNanos : a -> { b | nanos : a } -> { b | nanos : a }
setNanos value model =
    { model | nanos = value }


setPaths : a -> { b | paths : a } -> { b | paths : a }
setPaths value model =
    { model | paths = value }


setValues : a -> { b | values : a } -> { b | values : a }
setValues value model =
    { model | values = value }
